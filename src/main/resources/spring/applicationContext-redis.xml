<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- <context:property-placeholder로 관리해야하는 여러 데이터 소스가 있고 이를 구성 파일에 저장하지 않으려면 ignore-unresolvable="true"를 추가해야 합니다. -->
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true" />

	<!-- 새 버전 2.3 이후에는 JedisPoolConfig의 속성 이름이 maxActive가 아니라 maxTotal이며 maxWait 속성이 없음으로 Jedis 소스 코드 또는 Baidu를 살펴보는 것이 좋습니다. -->
	<!-- redis 연결 풀 구성 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 최대 유휴 수 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 연결 풀의 최대 데이터베이스 연결 수 -->
		<property name="maxTotal" value="${redis.maxTotal}" />
		<!-- 최대 연결 설정 대기 시간 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<!-- 연결 해제를 위한 최소 유휴 시간은 기본적으로 1800000 밀리초 (30분)입니다. -->
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
		<!-- 각 릴리스 검사 중 최대 릴리스 수는 다음과 같은 경우 음수입니다. 1 / abs(n), 기본값 3 -->
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
		<!-- 제거 스캔 간격 (밀리초) 음수이면 제거 스레드가 실행되지 않습니다. 기본값 -1 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
		<!-- 풀에서 연결을 제거하기 전에 확인할지 여부, 테스트가 실패하면 풀에서 연결을 제거하고 다른 연결을 제거하십시오. -->
		<!-- <property name="testOnBorrow" value="${redis.testOnBorrow}" /> -->
		<!-- 유휴 상태일 때 유효성 검사, 기본값 false -->
		<!-- <property name="testWhileIdle" value="${redis.testWhileIdle}" /> -->
	</bean>

	<!-- redis 연결 팩토리 -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
		<property name="poolConfig" ref="jedisPoolConfig"></property>
		<!-- IP주소 -->
		<property name="hostName" value="${redis.host.ip}"></property>
		<!-- 포트번호 -->
		<property name="port" value="${redis.port}"></property>
		<!-- redis가 비밀번호로 설정된 경우 -->
		<!-- <property name="password" value="${redis.password}" /> -->
		<!-- 클라이언트 제한 시간 단위는 밀리초입니다. -->
		<property name="timeout" value="${redis.timeout}"></property>
	</bean>

	<!-- 객체 지향 템플릿인, redis 작업 템플릿 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- Serializer를 구성하지 않으면 기본값은 저장할 때 문자열을 사용하는 것입니다. 사용자 유형을 사용하여 저장하면 '사용자가 문자열로 전송할 수 없습니다.'라는 오류 메시지가 표시됩니다. -->
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
		<!-- <property name="enableTransactionSupport" value="true"></property> -->
	</bean>

	<!-- redis 툴 클래스 (주석을 통해 주입 가능) -->
	<bean id="redisUtil" class="com.spring.redis.util.RedisUtil">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>

</beans>